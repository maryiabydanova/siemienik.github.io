"use strict";(self.webpackChunksiemienik_com=self.webpackChunksiemienik_com||[]).push([[819],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return u}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),d=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=d(r),u=a,f=m["".concat(s,".").concat(u)]||m[u]||c[u]||i;return r?n.createElement(f,l(l({ref:t},p),{},{components:r})):n.createElement(f,l({ref:t},p))}));function u(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var d=2;d<i;d++)l[d]=r[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},9626:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return d},toc:function(){return p},default:function(){return m}});var n=r(7462),a=r(3366),i=(r(7294),r(3905)),l=["components"],o={slug:"./getting-started",id:"getting-started",sidebar_label:"Getting Started"},s="Getting Started",d={unversionedId:"xlsx-renderer/getting-started",id:"xlsx-renderer/getting-started",isDocsHomePage:!1,title:"Getting Started",description:"Create template",source:"@site/docs/xlsx-renderer/030-getting-started.md",sourceDirName:"xlsx-renderer",slug:"/xlsx-renderer/getting-started",permalink:"/docs/xlsx-renderer/getting-started",editUrl:"https://github.com/siemienik/siemienik.github.io/edit/master/docs/xlsx-renderer/030-getting-started.md",version:"current",sidebarPosition:30,frontMatter:{slug:"./getting-started",id:"getting-started",sidebar_label:"Getting Started"},sidebar:"docs",previous:{title:"Installation",permalink:"/docs/xlsx-renderer/how-to-install-xlsx-renderer"},next:{title:"Cells",permalink:"/docs/xlsx-renderer/cells"}},p=[{value:"Create template",id:"create-template",children:[]},{value:"Write a code",id:"write-a-code",children:[{value:"NodeJS:",id:"nodejs",children:[]},{value:"Or for browser:",id:"or-for-browser",children:[]}]},{value:"What&#39;s next?",id:"whats-next",children:[]},{value:"Useful links:",id:"useful-links",children:[]}],c={toc:p};function m(e){var t=e.components,r=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"getting-started"},"Getting Started"),(0,i.kt)("h2",{id:"create-template"},"Create template"),(0,i.kt)("p",null,"Basic part of using XLSX-Renderer is creating a template file. "),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Open MS Excel (or another worksheet manager) and create new file,"),(0,i.kt)("li",{parentName:"ol"},"In ",(0,i.kt)("inlineCode",{parentName:"li"},"A1")," type ",(0,i.kt)("code",null,"# Hello ${name}! How are you?")," - which insert variable ",(0,i.kt)("inlineCode",{parentName:"li"},"name")," into template string,"),(0,i.kt)("li",{parentName:"ol"},"In ",(0,i.kt)("inlineCode",{parentName:"li"},"A2")," type ",(0,i.kt)("inlineCode",{parentName:"li"},"#! END_ROW")," - which commits this row and move to the next one,"),(0,i.kt)("li",{parentName:"ol"},"In ",(0,i.kt)("inlineCode",{parentName:"li"},"B1")," type ",(0,i.kt)("inlineCode",{parentName:"li"},"Total items:"),","),(0,i.kt)("li",{parentName:"ol"},"In ",(0,i.kt)("inlineCode",{parentName:"li"},"B2")," type ",(0,i.kt)("inlineCode",{parentName:"li"},"## items.length")," - which writes length of array ",(0,i.kt)("inlineCode",{parentName:"li"},"items"),","),(0,i.kt)("li",{parentName:"ol"},"In ",(0,i.kt)("inlineCode",{parentName:"li"},"B3")," type ",(0,i.kt)("inlineCode",{parentName:"li"},"#! FINISH")," - which tells to the renderer, that should finish rendering of this worksheet."),(0,i.kt)("li",{parentName:"ol"},"Save file as ",(0,i.kt)("inlineCode",{parentName:"li"},"report-template.xlsx")," in your project dir,"),(0,i.kt)("li",{parentName:"ol"},"(optional) Try some various of styling, widths, heights and ect.")),(0,i.kt)("h2",{id:"write-a-code"},"Write a code"),(0,i.kt)("h3",{id:"nodejs"},"NodeJS:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import {Renderer} from 'xlsx-renderer';\n\n// ... define viewModel\nconst viewModel = { name:\"World\", items:[/*...*/] };\n\n// ... generate a report:\nconst renderer = new Renderer();\nconst result = await renderer.renderFromFile('./report-template.xlsx', viewModel);\nawait result.xlsx.writeFile('./my-awesome-report.xlsx');\n")),(0,i.kt)("h3",{id:"or-for-browser"},"Or for browser:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { Renderer } from "xlsx-renderer";\nimport { saveAs } from "file-saver";\n\n// ... define viewModel:\nconst viewModel = { name:"World", items:[/*...*/] };\n\n//... generate a report:\n\n// 1. Download a template.\nfetch("./template.xlsx")\n  // 2. Get template as ArrayBuffer.\n  .then((response) => response.arrayBuffer())\n  // 3. Fill the template with data (generate a report).\n  .then((buffer) => new Renderer().renderFromArrayBuffer(buffer, viewModel))\n  // 4. Get a report as buffer.\n  .then((report) => report.xlsx.writeBuffer())\n  // 5. Use `saveAs` to download on browser site.\n  .then((buffer) => saveAs(new Blob([buffer]), `${Date.now()}_report.xlsx`))\n  // Handle errors.\n  .catch((err) => console.log("Error writing excel export", err));\n')),(0,i.kt)("h2",{id:"whats-next"},"What's next?"),(0,i.kt)("p",null,"I recommend to study ",(0,i.kt)("a",{parentName:"p",href:"/docs/xlsx-renderer/examples"},"examples")," and deeply analyze the ",(0,i.kt)("a",{parentName:"p",href:"/docs/xlsx-renderer/cells"},"Cells documentation"),"."),(0,i.kt)("h2",{id:"useful-links"},"Useful links:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/xlsx-renderer/cells"},"Cells commands")," - describes how different values for cells drive the renderer."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/xlsx-renderer/examples"},"Examples")," - list of set of template, viewModel and expected results used for testing purposes."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/Siemienik/XToolset/discussions"},"Discussions")," - There are some topics, where people ask how to do some goals."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://gitter.im/Siemienik/community"},"Gitter")," - community live chat."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/xlsx-renderer/cli"},"CLI")," - Command line interface, handy for creating and testing templates.")))}m.isMDXComponent=!0}}]);